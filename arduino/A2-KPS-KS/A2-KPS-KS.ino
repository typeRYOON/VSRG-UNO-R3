#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <LiquidCrystal.h>

const uint8_t VSRG[] PROGMEM =
{
0xc0, 0xc0, 0x61, 0x80, 0x61, 0x80, 0x73, 0x00, 0x33, 0x00, 0x33, 0x00, 0x1e, 0x00, 0x1e, 0x00, 
0x0c, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x70, 0x00, 0x70, 0x00, 0x3c, 0x00, 0x0f, 0x00, 0x03, 0x00, 
0x03, 0x00, 0x7f, 0x00, 0x3c, 0x00, 0x38, 0x00, 0x7f, 0x00, 0x63, 0x00, 0x63, 0x00, 0x67, 0x00, 
0x6e, 0x00, 0x66, 0x00, 0x63, 0x00, 0x63, 0x80, 0x00, 0x00, 0x1f, 0x00, 0x39, 0x00, 0x60, 0x00, 
0xe0, 0x00, 0xe1, 0x80, 0xe1, 0x80, 0x61, 0x80, 0x3b, 0x80, 0x1f, 0x80, 0x00, 0x00, 0x0c, 0x00, 
0x0c, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00
};

const uint8_t kurisu[] PROGMEM =
{
  // 'kurisu', 48x70px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 
0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 
0xff, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0xf3, 0xff, 0xfa, 0x4c, 0x00, 0x01, 0xf2, 0x3f, 0xe0, 0x78, 0x00, 0x01, 0xf2, 0x07, 0xe3, 
0xfe, 0x00, 0x01, 0xfb, 0xff, 0xff, 0xde, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 
0xff, 0xff, 0x9e, 0x00, 0x03, 0xff, 0xfe, 0xff, 0x9e, 0x00, 0x03, 0xff, 0xf6, 0xff, 0xbe, 0x00, 
0x03, 0xff, 0xf4, 0x7f, 0x7e, 0x00, 0x03, 0xff, 0xf7, 0xbf, 0xee, 0x00, 0x03, 0xff, 0xff, 0xec, 
0xee, 0x00, 0x01, 0xff, 0xff, 0x8e, 0x8e, 0x00, 0x01, 0xff, 0xfd, 0x80, 0x8e, 0x00, 0x01, 0xff, 
0xfa, 0x00, 0x0e, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x0e, 0x00, 0x01, 0xfd, 0xf0, 0x00, 0x0e, 0x00, 
0x01, 0xfd, 0xf8, 0x00, 0x1c, 0x00, 0x00, 0xfe, 0xe8, 0x00, 0x1c, 0x00, 0x00, 0xff, 0xc8, 0x02, 
0x3c, 0x00, 0x00, 0xff, 0x88, 0x00, 0x78, 0x00, 0x00, 0xff, 0x9c, 0x00, 0xf8, 0x00, 0x00, 0xff, 
0x1d, 0x41, 0xf0, 0x00, 0x00, 0xfe, 0x3e, 0x3b, 0xf0, 0x00, 0x00, 0xfc, 0x58, 0x7f, 0xf0, 0x00, 
0x00, 0xf8, 0xa0, 0x7f, 0xf0, 0x00, 0x00, 0xf0, 0x80, 0xff, 0xf0, 0x00, 0x00, 0xe0, 0x00, 0xff, 
0xf0, 0x00, 0x00, 0xe0, 0x00, 0xf7, 0xf0, 0x00, 0x00, 0xa0, 0x84, 0xdb, 0xf0, 0x00, 0x00, 0xa0, 
0x0c, 0xdb, 0xc8, 0x00, 0x01, 0x20, 0x17, 0xeb, 0xc0, 0x00, 0x01, 0xa0, 0x4e, 0x7f, 0xc4, 0x00, 
0x02, 0x20, 0x00, 0xf7, 0xc4, 0x00, 0x03, 0x00, 0x01, 0x3f, 0xc4, 0x00, 0x04, 0x50, 0x0c, 0x3f, 
0xe3, 0x00, 0x00, 0x40, 0x40, 0x1f, 0xee, 0x80, 0x11, 0x08, 0xc0, 0x0f, 0xec, 0x80, 0x18, 0x20, 
0x80, 0x07, 0xf4, 0xc0, 0x10, 0x03, 0x00, 0x03, 0xf8, 0xc0, 0x10, 0x91, 0x00, 0x03, 0x7c, 0xc0, 
0x00, 0x08, 0x50, 0x03, 0x7e, 0xc0, 0x00, 0x23, 0xd0, 0x03, 0xbe, 0xe0, 0x00, 0x10, 0xb0, 0x01, 
0xef, 0xc0, 0x00, 0x07, 0x90, 0x01, 0xe7, 0x40, 0x00, 0x00, 0x00, 0x01, 0xe2, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00
};


LiquidCrystal lcd(12, 11, 10, 9, 8, 2);
char buffer[9];
char buffer2[16];
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);
const uint8_t WIDTH = 14, HEIGHT = 48;
uint8_t bits[WIDTH][HEIGHT] = {0};
int32_t KS;
bool on = false;
uint32_t prev = millis(), now;

void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.println("KPS :: 0        ");
  lcd.print("                ");
  display.begin();
  display.setContrast(50);
  display.clearDisplay();
  display.drawBitmap(25, -7, kurisu, 48, 70, BLACK);
  display.drawBitmap(65, 0, VSRG, 10, 48, BLACK);
  display.display();
}

void updateBitmap(const int32_t KS)
{ // Shift values up :: - -                                                            - -
  for (uint8_t x = 0; x < WIDTH; ++x)
  {
    for (uint8_t y = 0; y < HEIGHT; y += 2) // y += 2
    {
      bits[x][y+1] = bits[x][y+2];
      bits[x][y]   = bits[x][y+1];
    }
  }

  uint8_t x = 0, stopX;
  for (uint32_t i = 2; i <= 128; i <<= 1)
  {//
    stopX = x + 2;
    for (; x < stopX; ++x)
    {
      bits[x][47] = KS & i;
      bits[x][46] = KS & i;
    }
  }
}


void drawBitmap(const bool print)
{
  //display.clearDisplay();
  for (uint8_t x = 0; x < WIDTH; ++x) {
    for (uint8_t y = 0; y < HEIGHT; ++y) {
      if (print && bits[x][y]) { display.drawPixel(x+5, y, BLACK); }
      else { display.drawPixel(x+5, y, WHITE); }
    }
  }
  display.display();
}


void print16_2(int32_t value)
{
  sprintf(buffer, "%d        ", (value & 0xFFFFFC0) >> 10);
  for (int i = 2, j = 0; i <= 128; i <<= 1) {
    buffer2[j++] = i & value ? '\xDB' : ' ';
  }
  lcd.setCursor(7, 0);
  lcd.print(buffer);
  lcd.setCursor(0, 1);
  lcd.print(buffer2);
}

uint8_t c = 0;
void loop()
{
  if (Serial.available() > 0)
  {
    String input = Serial.readStringUntil('#');
    if (input.length() > 0)
    {
      input.trim();
      int32_t value = input.toInt();
      KS = value & 0xFE;
      updateBitmap(KS);
      if (c++ == 3)
      {
        c = 0;
        drawBitmap(true);
      }
      print16_2(value);
      prev = millis();
    }
  }
  now = millis();
  if (now - prev >= 500) {
    drawBitmap(false);
    prev = now;
  }
}